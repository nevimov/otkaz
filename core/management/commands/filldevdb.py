"""
Populate the database with dummy data.
"""
import random
import re

from allauth.account.models import EmailAddress
from django.contrib.auth import get_user_model
from django.contrib.sites.models import Site
from django.core.management import call_command
from django.core.management.base import BaseCommand
from faker import Faker

from core import const
from accounts.models import Group
from catalog.models import Window
from cities.models import City
from sellers.models import Phone, Place, Seller

# Login, password and email to use to create a non-random seller (for the
# purposes of manual testing).
TS_USERNAME = 'testseller'
TS_PASSWORD = TS_USERNAME
TS_EMAIL = 'testseller@example.com'
# Minimal number of windows to associate with the test seller.
TS_MIN_WINDOWS = 30

User = get_user_model()
fake = Faker(locale='ru_RU')
Faker.seed(0)


def create_city(city_name, site_domain, site_name=None, site_id=None):
    """
    Create and return a dummy cities.models.City object.
    """
    if not site_name:
        site_name = f"Сайт города {city_name.title()}"
    site = Site.objects.create(id=site_id, domain=site_domain, name=site_name)
    return City.objects.create(name=city_name, site=site)


def populate_cities():
    """
    Populate db tables belonging to the 'cities' app.
    """
    # Remove the default 'example.com' site created by django.contrib.sites.
    Site.objects.get(pk=1).delete()

    create_city('Москва', '0.0.0.0', site_id=1)
    create_city('Новокузнецк', '0.0.0.0:8001', site_id=2)
    create_city('Самара', '0.0.0.0:8002', site_id=3)


def create_phone(**kwargs):
    """
    Create and return a dummy sellers.models.Phone object.
    """
    number = kwargs.pop('number', None)
    if number is None:
        number = fake.phone_number()
        # 'phonenumberslite' (the package responsible for validating phone
        # numbers in this project) uses a strict validation algorithm that
        # doesn't accept most of fake numbers generated by the 'Faker'
        # package. To fix the problem we replace the first 4 digits of
        # generated numbers with a valid prefix ('+7' or '8' plus a mobile
        # network provider code).
        number = re.sub(r'\D', '', number)
        number = random.choice(['+7913', '8923', '+7903']) + number[4:]

    seller = kwargs.pop('seller', random.choice(Seller.objects.all()))
    Phone.objects.create(
        seller=seller,
        number=number,
    )


def create_place(**kwargs):
    """
    Create and return a dummy sellers.models.Place object.
    """
    city = kwargs.pop('city', random.choice(City.objects.all()))
    seller = kwargs.pop('seller', random.choice(Seller.objects.all()))
    place_type = kwargs.pop('type', random.choice(list(Place.Types)))
    street_address = kwargs.pop('street_address', fake.street_address())
    Place.objects.create(
        city=city,
        seller=seller,
        type=place_type.value,
        street_address=street_address,
    )


def create_seller(public_name, city_name=None, **kwargs):
    """
    Create and return a dummy sellers.models.Seller object.
    """
    username = kwargs.pop('username', fake.user_name())
    password = kwargs.pop('password', username + 'pwd')
    first_name = kwargs.pop('first_name', fake.first_name_male())
    last_name = kwargs.pop('last_name', fake.last_name_male())
    email = kwargs.pop('email', fake.ascii_safe_email())
    legal_name = kwargs.pop(
        'legal_name',
        fake.company().replace('«', '').replace('»', '')
    )
    OGRN = kwargs.pop('OGRN', fake.numerify(13 * '#'))
    INN = kwargs.pop('INN', fake.numerify(random.choice([10, 12]) * '#'))
    website = kwargs.pop('website', fake.url())
    phones = kwargs.pop('phones', None)
    places = kwargs.pop('places', None)

    user = User.objects.create_user(
        username=username,
        password=password,
        first_name=first_name,
        last_name=last_name,
    )
    sellers_group = Group.objects.get(name=const.SELLERS_GROUPNAME)
    user.groups.add(sellers_group)

    seller = Seller.objects.create(
        user=user,
        public_name=public_name,
        legal_name=legal_name,
        OGRN=OGRN,
        INN=INN,
        website=website,
        email=email,
    )

    if phones is None:
        for _ in range(random.randint(1, 3)):
            create_phone(seller=seller)

    if places is None:
        if city_name:
            city = City.objects.get(name__iexact=city_name)
        else:
            city = random.choice(City.objects.all())
        for _ in range(random.randint(1, 3)):
            create_place(city=city, seller=seller)

    return seller


def populate_sellers():
    """
    Populate db tables belonging to the 'sellers' app.
    """
    CITY_COMPANIES = {
        'Москва': [
            'Аверс',
            'Альфа-Стиль',
            'Галлерея Окон',
            'Город Мастеров',
            'Гранд',
            'Дарсинг',
            'Кербер-Хаус',
            'Колизей',
        ],
        'Новокузнецк': [
            'Кузнецкие Окна',
            'Лина',
            'Лореон',
            'Мир Окон',
            'Окно-Профи',
            'Оконный Дом',
        ],
        'Самара': [
            'Панорама',
            'Первый Дверной',
            'Строй-Дом',
            'Фабрика Окон',
            'Финестра',
            'Шпингалет',
        ],
    }

    for city_name, city_companies in CITY_COMPANIES.items():
        for company in city_companies:
            create_seller(public_name=company, city_name=city_name)

    # For purposes of manual testing, make one seller non-random.
    user = Seller.objects.first().user
    user.username = TS_USERNAME
    user.set_password(TS_PASSWORD)
    user.save()
    EmailAddress.objects.create(
        user=user,
        email=TS_EMAIL,
        verified=True,
        primary=True,
    )


def create_window(**kwargs):
    """
    Create and return a dummy catalog.models.Window object.
    """
    STANDARD_SIZES = {
        # window type: (width, height)
        Window.Types.SINGLE: (700, 1400),
        Window.Types.DOUBLE: (1400, 1400),
        Window.Types.TRIPLE: (2100, 1400),
        Window.Types.SINGLE_TRANSOM: (700, 1400),
        Window.Types.DOUBLE_TRANSOM: (1400, 1400),
        Window.Types.TRIPLE_TRANSOM: (2100, 1400),
    }

    def random_dimension(dimension, delta=0.025):
        return random.randrange(
            int(dimension * (1 - delta)), int(dimension * (1 + delta))
        )

    window_type = kwargs.pop('type', random.choice(list(Window.Types)))
    width = kwargs.pop(
        'width',
        random_dimension(STANDARD_SIZES[window_type][0])
    )
    height = kwargs.pop(
        'height',
        random_dimension(STANDARD_SIZES[window_type][1])
    )
    color = kwargs.pop('color', random.choice(Window.Colors.values))
    price = kwargs.pop('price', random.randrange(1000, 10000, step=100))
    seller = kwargs.pop('seller', random.choice(Seller.objects.all()))
    place  =  kwargs.pop('place', random.choice(seller.places.all()))
    description = kwargs.pop('description', None)

    if description is None:
        if random.random() > 0.15:
            description = '<p>' + fake.paragraph(nb_sentences=5) + '</p>'
        else:
            description = ''

    return Window.objects.create(
        type=window_type.value,
        width=width,
        height=height,
        color=color,
        price=price,
        description=description,
        seller=seller,
        place=place,
    )


def populate_catalog():
    """
    Fill db tables belonging to the 'catalog' app.
    """

    for _ in range(315):
        create_window()

    # Ensure our test seller always has enough windows added
    seller = Seller.objects.get(user__username=TS_USERNAME)
    window_count = seller.windows.count()
    if window_count < TS_MIN_WINDOWS:
        for _ in range(TS_MIN_WINDOWS - window_count):
            create_window(seller=seller)


class Command(BaseCommand):
    help = "Populate the database with dummy data."

    def handle(self, *args, **options):
        call_command('prepdb')
        self.stdout.write("Filling db tables belonging to the 'cities' app...")
        populate_cities()
        self.stdout.write(self.style.SUCCESS("DONE"))

        self.stdout.write("Filling db tables belonging to the 'sellers' app...")
        populate_sellers()
        self.stdout.write(self.style.SUCCESS("DONE"))

        self.stdout.write("Filling db tables belonging to the 'catalog' app...")
        populate_catalog()
        self.stdout.write(self.style.SUCCESS("DONE"))